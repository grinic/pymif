pymif.microscope_manager.zarr_manager
=====================================

.. py:module:: pymif.microscope_manager.zarr_manager


Classes
-------

.. autoapisummary::

   pymif.microscope_manager.zarr_manager.ZarrManager


Module Contents
---------------

.. py:class:: ZarrManager(path, chunks: Tuple[int, Ellipsis] = None, mode: str = 'r', metadata: dict[str, Any] = None)

   Bases: :py:obj:`pymif.microscope_manager.microscope_manager.MicroscopeManager`


   A manager class for reading and handling OME-Zarr datasets.

   This class reads NGFF-compliant multiscale image data along with
   metadata and optional label layers from a Zarr directory. It supports
   lazy loading with Dask, label layer detection, and integration with
   Napari for visualization.

   Parameters
   ----------
   path : str or Path
       Path to the root directory of the OME-Zarr dataset.
   chunks : Tuple[int, ...], optional
       Chunk size to apply when reading arrays. If None, native chunking
       in the Zarr arrays is used.


   .. py:attribute:: path


   .. py:attribute:: chunks
      :value: None



   .. py:attribute:: mode
      :value: 'r'



   .. py:attribute:: metadata
      :value: None



   .. py:method:: read() -> Tuple[List[dask.array.Array], Dict[str, Any]]

      Read an OME-Zarr dataset and extract both image data and metadata.

      This method lazily loads the multiscale image pyramid and metadata
      from the root of the Zarr dataset. If `/labels/` groups exist, they
      are also read into the `self.labels` attribute.

      Returns
      -------
      data_levels : List[dask.array.Array]
          List of Dask arrays, one for each resolution level.
      metadata : Dict[str, Any]
          Dictionary containing image metadata such as axes, scales, sizes,
          channels, time increments, and units.

      Raises
      ------
      ValueError
          If the dataset structure is invalid or lacks required metadata.



   .. py:method:: _load_group(name)


   .. py:method:: _load_labels() -> Dict[str, List[dask.array.Array]]

      Load label layers from the `/labels/` group in the Zarr dataset.

      Each label is stored as a multiscale pyramid similar to image data.

      Returns
      -------
      labels : Dict[str, List[dask.array.Array]]
          Dictionary mapping each label name to its list of pyramid levels.



   .. py:method:: add_label(label_levels: List[dask.array.Array], label_name: str = 'new_label', compressor: Any = None, compressor_level: Any = 3, parallelize: Any = False) -> None

      Add a label layer to the Zarr dataset.

      Parameters
      ----------
      label_levels : List[dask.array.Array]
          A list of arrays representing a label image pyramid.
      label_name : str, optional
          Name of the label group (default is "new_label").
      compressor : Any, optional
          Compression method to use when writing labels.
      compressor_level : Any, optional
          Compression level to apply (default: 3).
      parallelize : bool, optional
          If True, label data is written in parallel.



   .. py:method:: visualize_zarr(viewer: Optional[napari.Viewer] = None) -> napari.Viewer

      Visualize the OME-Zarr dataset using Napari's `napari-ome-zarr` plugin.

      Parameters
      ----------
      viewer : napari.Viewer, optional
          An existing viewer instance. If None, a new one will be created.

      Returns
      -------
      viewer : napari.Viewer
          A Napari viewer instance with the image loaded.



   .. py:method:: create_empty_group(group_name: str, metadata: Dict[str, Any], is_label: bool = False)


   .. py:method:: write_image_region(data, t: int | slice = slice(None), c: int | slice = slice(None), z: int | slice = slice(None), y: int | slice = slice(None), x: int | slice = slice(None), level: int = 0, group: Optional[str] = None)

      Public method to write or update a region in the dataset or sub-group.

      Parameters
      ----------
      data : Union[np.ndarray, da.Array, List[Union[np.ndarray, da.Array]]]
          Arrays representing an image region or its pyramid.
      t, c, z, y, x : int or slice
          Slices for each dimension.
      level : int
          The pyramid level to write to (if `data` is a single array).
      group_name : str, optional
          Name of the group inside the root.       



   .. py:method:: write_label_region(data, t: int | slice = slice(None), z: int | slice = slice(None), y: int | slice = slice(None), x: int | slice = slice(None), level: int = 0, group: str = None)

      Public method to write or update a region in the dataset or sub-group.



